import pygame
import random


class Board():

    def __init__(self, screen):
        self.colors = {1: 'red',
                       2: 'blue',
                       3: 'yellow',
                       4: 'orange',
                       5: 'green'
                       }
        self.screen = screen
        self.color = pygame.Color(255, 0, 0)
        self.tileSize = 50
        self.width = 10
        self.height = 18
        self.grid = [[0 for i in range(self.width)]
                     for i in range(self.height)]

    def addPeice(self):
        """Adds a tetromino to the board"""
        self.peice = Tetromino()
        self.peice.topLeft = (5, 0)

    def drawBoard(self):
        """Draws the current game board with landed peices"""
        for x, col in enumerate(self.grid):
            left = x * self.tileSize
            for y, row in enumerate(col):
                # draw tile
                top = y * self.tileSize
                pygame.draw.rect(self.surface, self.color,
                                 (left, top, self.tileSize, self.tileSize))

    def drawPeice(self):
        """Draws the current active peice"""
        self.peice.shape.topLeft
        for x, col in enumerate(self.peice.shape):
            left = x * self.tileSize
            for y, row in enumerate(col):
                top = y * self.tileSize
                pygame.draw.rect(self.surface, self.color,
                                 (left, top, self.tileSize, self.tileSize))

    def rotate(self):
        pass

    def checkLines(self):
        """Checks for compleated lines"""
        for line in self.grid:
            if 0 not in line:
                pass

    def clearRow(self):
        """Clears a row"""
        pass


class Tetromino(object):

    # create peice shapes
    oPeice = [[[1, 1],
               [1, 1]]
               ]

    zPeice = [[[1, 1, 0, 0],
               [0, 1, 1, 0]
               [0, 0, 0, 0],
               [0, 0, 0, 0]],

              [[0, 1, 0, 0],
               [1, 1, 0, 0],
               [1, 0, 0, 0],
               [0, 0, 0, 0]
               ]
              ]

    lPeice = [[[1, 1, 1, 1]
               [0, 0, 0, 0],
               [0, 0, 0, 0]
               [0, 0, 0, 0]],
            
               [[1, 0, 0, 0],
                [1, 0, 0, 0],
                [1, 0, 0, 0],
                [1, 0, 0, 0]]
               ]

    tPeice = [[[1, 1, 1, 0],
               [0, 1, 0, 0],
               [0, 0, 0, 0],
               [0, 0, 0, 0]],

               [[1, 0, 0, 0],
                [1, 1, 0, 0],
                [1, 0, 0, 0],
                [0, 0, 0, 0]],

               [[0, 1, 0, 0],
                [1, 1, 1, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0]],

               [[0, 1, 0, 0],
                [1, 1, 0, 0],
                [0, 1, 0, 0],
                [0, 0, 0, 0]]
              ]

    sPeice = [[[0, 1, 1, 0],
               [1, 1, 0, 0],
               [0, 0, 0, 0],
               [0, 0, 0, 0]],

               [[1, 0, 0, 0],
                [1, 1, 0, 0],
                [0, 1, 0, 0],
                [0, 0, 0, 0]]
               ]

    peices = [oPeice, zPeice, lPeice, tPeice, sPeice]

    def __init__(self):

        self.shape = random.choice(self.peices)
        self._x = 0
        self._y = 0

    def rotate(self):
        """rotates a peice"""
        pass

    @property
    def topLeft(self):
        return (self._x, self._y)

    @topLeft.setter
    def topLeft(self, value):
        self._x = value[0]
        self._y = value[1]


class Tetris():

    def __init__(self):
        pygame.init()
        pygame.display.init()
        self.screen = pygame.display.set_mode((500, 600))
        self.blockSize = 50
        self.board = Board(self.screen)
        self.board.addPeice()
        print self.board.peice.topLeft

    def run(self):
        pass

    def paint(self):
        pass

if __name__ == '__main__':
    t = Tetris()
    while True:
        pass
